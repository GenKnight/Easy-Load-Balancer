// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: elb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "elb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace elb {

namespace {

const ::google::protobuf::Descriptor* HostAddr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HostAddr_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRouteByAgentReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRouteByAgentReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRouteByAgentRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRouteByAgentRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgTypeId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_elb_2eproto() {
  protobuf_AddDesc_elb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "elb.proto");
  GOOGLE_CHECK(file != NULL);
  HostAddr_descriptor_ = file->message_type(0);
  static const int HostAddr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostAddr, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostAddr, port_),
  };
  HostAddr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HostAddr_descriptor_,
      HostAddr::default_instance_,
      HostAddr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostAddr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostAddr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HostAddr));
  GetRouteByAgentReq_descriptor_ = file->message_type(1);
  static const int GetRouteByAgentReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteByAgentReq, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteByAgentReq, cmdid_),
  };
  GetRouteByAgentReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRouteByAgentReq_descriptor_,
      GetRouteByAgentReq::default_instance_,
      GetRouteByAgentReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteByAgentReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteByAgentReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRouteByAgentReq));
  GetRouteByAgentRsp_descriptor_ = file->message_type(2);
  static const int GetRouteByAgentRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteByAgentRsp, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteByAgentRsp, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteByAgentRsp, hosts_),
  };
  GetRouteByAgentRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRouteByAgentRsp_descriptor_,
      GetRouteByAgentRsp::default_instance_,
      GetRouteByAgentRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteByAgentRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteByAgentRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRouteByAgentRsp));
  MsgTypeId_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_elb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HostAddr_descriptor_, &HostAddr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRouteByAgentReq_descriptor_, &GetRouteByAgentReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRouteByAgentRsp_descriptor_, &GetRouteByAgentRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_elb_2eproto() {
  delete HostAddr::default_instance_;
  delete HostAddr_reflection_;
  delete GetRouteByAgentReq::default_instance_;
  delete GetRouteByAgentReq_reflection_;
  delete GetRouteByAgentRsp::default_instance_;
  delete GetRouteByAgentRsp_reflection_;
}

void protobuf_AddDesc_elb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\telb.proto\022\003elb\"$\n\010HostAddr\022\n\n\002ip\030\001 \002(\005"
    "\022\014\n\004port\030\002 \002(\005\"2\n\022GetRouteByAgentReq\022\r\n\005"
    "modid\030\001 \002(\005\022\r\n\005cmdid\030\002 \002(\005\"P\n\022GetRouteBy"
    "AgentRsp\022\r\n\005modid\030\001 \002(\005\022\r\n\005cmdid\030\002 \002(\005\022\034"
    "\n\005hosts\030\003 \003(\0132\r.elb.HostAddr*\320\001\n\tMsgType"
    "Id\022\020\n\014GetHostReqId\020\001\022\020\n\014GetHostRspId\020\002\022\017"
    "\n\013ReportReqId\020\003\022\027\n\023GetRouteByToolReqId\020\004"
    "\022\027\n\023GetRouteByToolRspId\020\005\022\021\n\rRecordLbReq"
    "Id\020\006\022\030\n\024GetRouteByAgentReqId\020\007\022\030\n\024GetRou"
    "teByAgentRspId\020\010\022\025\n\021ReportStatusReqId\020\t", 399);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "elb.proto", &protobuf_RegisterTypes);
  HostAddr::default_instance_ = new HostAddr();
  GetRouteByAgentReq::default_instance_ = new GetRouteByAgentReq();
  GetRouteByAgentRsp::default_instance_ = new GetRouteByAgentRsp();
  HostAddr::default_instance_->InitAsDefaultInstance();
  GetRouteByAgentReq::default_instance_->InitAsDefaultInstance();
  GetRouteByAgentRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_elb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_elb_2eproto {
  StaticDescriptorInitializer_elb_2eproto() {
    protobuf_AddDesc_elb_2eproto();
  }
} static_descriptor_initializer_elb_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgTypeId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTypeId_descriptor_;
}
bool MsgTypeId_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int HostAddr::kIpFieldNumber;
const int HostAddr::kPortFieldNumber;
#endif  // !_MSC_VER

HostAddr::HostAddr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:elb.HostAddr)
}

void HostAddr::InitAsDefaultInstance() {
}

HostAddr::HostAddr(const HostAddr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:elb.HostAddr)
}

void HostAddr::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0;
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HostAddr::~HostAddr() {
  // @@protoc_insertion_point(destructor:elb.HostAddr)
  SharedDtor();
}

void HostAddr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HostAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HostAddr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HostAddr_descriptor_;
}

const HostAddr& HostAddr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_elb_2eproto();
  return *default_instance_;
}

HostAddr* HostAddr::default_instance_ = NULL;

HostAddr* HostAddr::New() const {
  return new HostAddr;
}

void HostAddr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HostAddr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ip_, port_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HostAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:elb.HostAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ip = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:elb.HostAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:elb.HostAddr)
  return false;
#undef DO_
}

void HostAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:elb.HostAddr)
  // required int32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ip(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:elb.HostAddr)
}

::google::protobuf::uint8* HostAddr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:elb.HostAddr)
  // required int32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ip(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:elb.HostAddr)
  return target;
}

int HostAddr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ip());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostAddr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HostAddr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HostAddr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HostAddr::MergeFrom(const HostAddr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HostAddr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostAddr::CopyFrom(const HostAddr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostAddr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HostAddr::Swap(HostAddr* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HostAddr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HostAddr_descriptor_;
  metadata.reflection = HostAddr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRouteByAgentReq::kModidFieldNumber;
const int GetRouteByAgentReq::kCmdidFieldNumber;
#endif  // !_MSC_VER

GetRouteByAgentReq::GetRouteByAgentReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:elb.GetRouteByAgentReq)
}

void GetRouteByAgentReq::InitAsDefaultInstance() {
}

GetRouteByAgentReq::GetRouteByAgentReq(const GetRouteByAgentReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:elb.GetRouteByAgentReq)
}

void GetRouteByAgentReq::SharedCtor() {
  _cached_size_ = 0;
  modid_ = 0;
  cmdid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRouteByAgentReq::~GetRouteByAgentReq() {
  // @@protoc_insertion_point(destructor:elb.GetRouteByAgentReq)
  SharedDtor();
}

void GetRouteByAgentReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRouteByAgentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRouteByAgentReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRouteByAgentReq_descriptor_;
}

const GetRouteByAgentReq& GetRouteByAgentReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_elb_2eproto();
  return *default_instance_;
}

GetRouteByAgentReq* GetRouteByAgentReq::default_instance_ = NULL;

GetRouteByAgentReq* GetRouteByAgentReq::New() const {
  return new GetRouteByAgentReq;
}

void GetRouteByAgentReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetRouteByAgentReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(modid_, cmdid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRouteByAgentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:elb.GetRouteByAgentReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 modid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmdid;
        break;
      }

      // required int32 cmdid = 2;
      case 2: {
        if (tag == 16) {
         parse_cmdid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
          set_has_cmdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:elb.GetRouteByAgentReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:elb.GetRouteByAgentReq)
  return false;
#undef DO_
}

void GetRouteByAgentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:elb.GetRouteByAgentReq)
  // required int32 modid = 1;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modid(), output);
  }

  // required int32 cmdid = 2;
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmdid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:elb.GetRouteByAgentReq)
}

::google::protobuf::uint8* GetRouteByAgentReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:elb.GetRouteByAgentReq)
  // required int32 modid = 1;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modid(), target);
  }

  // required int32 cmdid = 2;
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmdid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:elb.GetRouteByAgentReq)
  return target;
}

int GetRouteByAgentReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 modid = 1;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modid());
    }

    // required int32 cmdid = 2;
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmdid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRouteByAgentReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRouteByAgentReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRouteByAgentReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRouteByAgentReq::MergeFrom(const GetRouteByAgentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRouteByAgentReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRouteByAgentReq::CopyFrom(const GetRouteByAgentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRouteByAgentReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetRouteByAgentReq::Swap(GetRouteByAgentReq* other) {
  if (other != this) {
    std::swap(modid_, other->modid_);
    std::swap(cmdid_, other->cmdid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRouteByAgentReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRouteByAgentReq_descriptor_;
  metadata.reflection = GetRouteByAgentReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRouteByAgentRsp::kModidFieldNumber;
const int GetRouteByAgentRsp::kCmdidFieldNumber;
const int GetRouteByAgentRsp::kHostsFieldNumber;
#endif  // !_MSC_VER

GetRouteByAgentRsp::GetRouteByAgentRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:elb.GetRouteByAgentRsp)
}

void GetRouteByAgentRsp::InitAsDefaultInstance() {
}

GetRouteByAgentRsp::GetRouteByAgentRsp(const GetRouteByAgentRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:elb.GetRouteByAgentRsp)
}

void GetRouteByAgentRsp::SharedCtor() {
  _cached_size_ = 0;
  modid_ = 0;
  cmdid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRouteByAgentRsp::~GetRouteByAgentRsp() {
  // @@protoc_insertion_point(destructor:elb.GetRouteByAgentRsp)
  SharedDtor();
}

void GetRouteByAgentRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRouteByAgentRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRouteByAgentRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRouteByAgentRsp_descriptor_;
}

const GetRouteByAgentRsp& GetRouteByAgentRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_elb_2eproto();
  return *default_instance_;
}

GetRouteByAgentRsp* GetRouteByAgentRsp::default_instance_ = NULL;

GetRouteByAgentRsp* GetRouteByAgentRsp::New() const {
  return new GetRouteByAgentRsp;
}

void GetRouteByAgentRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetRouteByAgentRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(modid_, cmdid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  hosts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRouteByAgentRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:elb.GetRouteByAgentRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 modid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmdid;
        break;
      }

      // required int32 cmdid = 2;
      case 2: {
        if (tag == 16) {
         parse_cmdid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
          set_has_cmdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hosts;
        break;
      }

      // repeated .elb.HostAddr hosts = 3;
      case 3: {
        if (tag == 26) {
         parse_hosts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hosts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hosts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:elb.GetRouteByAgentRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:elb.GetRouteByAgentRsp)
  return false;
#undef DO_
}

void GetRouteByAgentRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:elb.GetRouteByAgentRsp)
  // required int32 modid = 1;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modid(), output);
  }

  // required int32 cmdid = 2;
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmdid(), output);
  }

  // repeated .elb.HostAddr hosts = 3;
  for (int i = 0; i < this->hosts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hosts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:elb.GetRouteByAgentRsp)
}

::google::protobuf::uint8* GetRouteByAgentRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:elb.GetRouteByAgentRsp)
  // required int32 modid = 1;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modid(), target);
  }

  // required int32 cmdid = 2;
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmdid(), target);
  }

  // repeated .elb.HostAddr hosts = 3;
  for (int i = 0; i < this->hosts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hosts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:elb.GetRouteByAgentRsp)
  return target;
}

int GetRouteByAgentRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 modid = 1;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modid());
    }

    // required int32 cmdid = 2;
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmdid());
    }

  }
  // repeated .elb.HostAddr hosts = 3;
  total_size += 1 * this->hosts_size();
  for (int i = 0; i < this->hosts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hosts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRouteByAgentRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRouteByAgentRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRouteByAgentRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRouteByAgentRsp::MergeFrom(const GetRouteByAgentRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  hosts_.MergeFrom(from.hosts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRouteByAgentRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRouteByAgentRsp::CopyFrom(const GetRouteByAgentRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRouteByAgentRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->hosts())) return false;
  return true;
}

void GetRouteByAgentRsp::Swap(GetRouteByAgentRsp* other) {
  if (other != this) {
    std::swap(modid_, other->modid_);
    std::swap(cmdid_, other->cmdid_);
    hosts_.Swap(&other->hosts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRouteByAgentRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRouteByAgentRsp_descriptor_;
  metadata.reflection = GetRouteByAgentRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace elb

// @@protoc_insertion_point(global_scope)
