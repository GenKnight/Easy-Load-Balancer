// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: elb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "elb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace elb {

namespace {

const ::google::protobuf::Descriptor* HostAddr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HostAddr_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetHostReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetHostReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetHostRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetHostRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRouteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRouteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRouteRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRouteRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* HostCallResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HostCallResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReportStatusReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReportStatusReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CacheGetRouteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CacheGetRouteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CacheGetRouteRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CacheGetRouteRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* HostBatchCallRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HostBatchCallRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* CacheBatchRptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CacheBatchRptReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgTypeId_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_elb_2eproto() {
  protobuf_AddDesc_elb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "elb.proto");
  GOOGLE_CHECK(file != NULL);
  HostAddr_descriptor_ = file->message_type(0);
  static const int HostAddr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostAddr, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostAddr, port_),
  };
  HostAddr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HostAddr_descriptor_,
      HostAddr::default_instance_,
      HostAddr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostAddr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostAddr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HostAddr));
  GetHostReq_descriptor_ = file->message_type(1);
  static const int GetHostReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHostReq, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHostReq, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHostReq, cmdid_),
  };
  GetHostReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetHostReq_descriptor_,
      GetHostReq::default_instance_,
      GetHostReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHostReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHostReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetHostReq));
  GetHostRsp_descriptor_ = file->message_type(2);
  static const int GetHostRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHostRsp, seq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHostRsp, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHostRsp, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHostRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHostRsp, host_),
  };
  GetHostRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetHostRsp_descriptor_,
      GetHostRsp::default_instance_,
      GetHostRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHostRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHostRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetHostRsp));
  ReportReq_descriptor_ = file->message_type(3);
  static const int ReportReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportReq, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportReq, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportReq, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportReq, tcost_),
  };
  ReportReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportReq_descriptor_,
      ReportReq::default_instance_,
      ReportReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportReq));
  GetRouteReq_descriptor_ = file->message_type(4);
  static const int GetRouteReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteReq, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteReq, cmdid_),
  };
  GetRouteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRouteReq_descriptor_,
      GetRouteReq::default_instance_,
      GetRouteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRouteReq));
  GetRouteRsp_descriptor_ = file->message_type(5);
  static const int GetRouteRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteRsp, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteRsp, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteRsp, hosts_),
  };
  GetRouteRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRouteRsp_descriptor_,
      GetRouteRsp::default_instance_,
      GetRouteRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRouteRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRouteRsp));
  HostCallResult_descriptor_ = file->message_type(6);
  static const int HostCallResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostCallResult, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostCallResult, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostCallResult, succ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostCallResult, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostCallResult, overload_),
  };
  HostCallResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HostCallResult_descriptor_,
      HostCallResult::default_instance_,
      HostCallResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostCallResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostCallResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HostCallResult));
  ReportStatusReq_descriptor_ = file->message_type(7);
  static const int ReportStatusReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportStatusReq, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportStatusReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportStatusReq, caller_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportStatusReq, results_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportStatusReq, ts_),
  };
  ReportStatusReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReportStatusReq_descriptor_,
      ReportStatusReq::default_instance_,
      ReportStatusReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportStatusReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReportStatusReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReportStatusReq));
  CacheGetRouteReq_descriptor_ = file->message_type(8);
  static const int CacheGetRouteReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheGetRouteReq, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheGetRouteReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheGetRouteReq, version_),
  };
  CacheGetRouteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CacheGetRouteReq_descriptor_,
      CacheGetRouteReq::default_instance_,
      CacheGetRouteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheGetRouteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheGetRouteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CacheGetRouteReq));
  CacheGetRouteRsp_descriptor_ = file->message_type(9);
  static const int CacheGetRouteRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheGetRouteRsp, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheGetRouteRsp, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheGetRouteRsp, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheGetRouteRsp, overload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheGetRouteRsp, route_),
  };
  CacheGetRouteRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CacheGetRouteRsp_descriptor_,
      CacheGetRouteRsp::default_instance_,
      CacheGetRouteRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheGetRouteRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheGetRouteRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CacheGetRouteRsp));
  HostBatchCallRes_descriptor_ = file->message_type(10);
  static const int HostBatchCallRes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostBatchCallRes, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostBatchCallRes, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostBatchCallRes, succcnt_),
  };
  HostBatchCallRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HostBatchCallRes_descriptor_,
      HostBatchCallRes::default_instance_,
      HostBatchCallRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostBatchCallRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostBatchCallRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HostBatchCallRes));
  CacheBatchRptReq_descriptor_ = file->message_type(11);
  static const int CacheBatchRptReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheBatchRptReq, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheBatchRptReq, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheBatchRptReq, results_),
  };
  CacheBatchRptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CacheBatchRptReq_descriptor_,
      CacheBatchRptReq::default_instance_,
      CacheBatchRptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheBatchRptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CacheBatchRptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CacheBatchRptReq));
  MsgTypeId_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_elb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HostAddr_descriptor_, &HostAddr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetHostReq_descriptor_, &GetHostReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetHostRsp_descriptor_, &GetHostRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportReq_descriptor_, &ReportReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRouteReq_descriptor_, &GetRouteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRouteRsp_descriptor_, &GetRouteRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HostCallResult_descriptor_, &HostCallResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReportStatusReq_descriptor_, &ReportStatusReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CacheGetRouteReq_descriptor_, &CacheGetRouteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CacheGetRouteRsp_descriptor_, &CacheGetRouteRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HostBatchCallRes_descriptor_, &HostBatchCallRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CacheBatchRptReq_descriptor_, &CacheBatchRptReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_elb_2eproto() {
  delete HostAddr::default_instance_;
  delete HostAddr_reflection_;
  delete GetHostReq::default_instance_;
  delete GetHostReq_reflection_;
  delete GetHostRsp::default_instance_;
  delete GetHostRsp_reflection_;
  delete ReportReq::default_instance_;
  delete ReportReq_reflection_;
  delete GetRouteReq::default_instance_;
  delete GetRouteReq_reflection_;
  delete GetRouteRsp::default_instance_;
  delete GetRouteRsp_reflection_;
  delete HostCallResult::default_instance_;
  delete HostCallResult_reflection_;
  delete ReportStatusReq::default_instance_;
  delete ReportStatusReq_reflection_;
  delete CacheGetRouteReq::default_instance_;
  delete CacheGetRouteReq_reflection_;
  delete CacheGetRouteRsp::default_instance_;
  delete CacheGetRouteRsp_reflection_;
  delete HostBatchCallRes::default_instance_;
  delete HostBatchCallRes_reflection_;
  delete CacheBatchRptReq::default_instance_;
  delete CacheBatchRptReq_reflection_;
}

void protobuf_AddDesc_elb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\telb.proto\022\003elb\"$\n\010HostAddr\022\n\n\002ip\030\001 \002(\005"
    "\022\014\n\004port\030\002 \002(\005\"7\n\nGetHostReq\022\013\n\003seq\030\001 \002("
    "\r\022\r\n\005modid\030\002 \002(\005\022\r\n\005cmdid\030\003 \002(\005\"e\n\nGetHo"
    "stRsp\022\013\n\003seq\030\001 \002(\r\022\r\n\005modid\030\002 \002(\005\022\r\n\005cmd"
    "id\030\003 \002(\005\022\017\n\007retcode\030\004 \002(\005\022\033\n\004host\030\005 \001(\0132"
    "\r.elb.HostAddr\"f\n\tReportReq\022\r\n\005modid\030\001 \002"
    "(\005\022\r\n\005cmdid\030\002 \002(\005\022\033\n\004host\030\003 \002(\0132\r.elb.Ho"
    "stAddr\022\017\n\007retcode\030\004 \002(\005\022\r\n\005tcost\030\005 \001(\r\"+"
    "\n\013GetRouteReq\022\r\n\005modid\030\001 \002(\005\022\r\n\005cmdid\030\002 "
    "\002(\005\"I\n\013GetRouteRsp\022\r\n\005modid\030\001 \002(\005\022\r\n\005cmd"
    "id\030\002 \002(\005\022\034\n\005hosts\030\003 \003(\0132\r.elb.HostAddr\"W"
    "\n\016HostCallResult\022\n\n\002ip\030\001 \002(\005\022\014\n\004port\030\002 \002"
    "(\005\022\014\n\004succ\030\003 \002(\r\022\013\n\003err\030\004 \002(\r\022\020\n\010overloa"
    "d\030\005 \002(\010\"q\n\017ReportStatusReq\022\r\n\005modid\030\001 \002("
    "\005\022\r\n\005cmdid\030\002 \002(\005\022\016\n\006caller\030\003 \002(\005\022$\n\007resu"
    "lts\030\004 \003(\0132\023.elb.HostCallResult\022\n\n\002ts\030\005 \002"
    "(\r\"A\n\020CacheGetRouteReq\022\r\n\005modid\030\001 \002(\005\022\r\n"
    "\005cmdid\030\002 \002(\005\022\017\n\007version\030\003 \002(\003\"q\n\020CacheGe"
    "tRouteRsp\022\r\n\005modid\030\001 \002(\005\022\r\n\005cmdid\030\002 \002(\005\022"
    "\017\n\007version\030\003 \002(\003\022\020\n\010overload\030\004 \001(\010\022\034\n\005ro"
    "ute\030\005 \003(\0132\r.elb.HostAddr\"=\n\020HostBatchCal"
    "lRes\022\n\n\002ip\030\001 \002(\005\022\014\n\004port\030\002 \002(\005\022\017\n\007succCn"
    "t\030\003 \002(\r\"X\n\020CacheBatchRptReq\022\r\n\005modid\030\001 \002"
    "(\005\022\r\n\005cmdid\030\002 \002(\005\022&\n\007results\030\003 \003(\0132\025.elb"
    ".HostBatchCallRes*\205\002\n\tMsgTypeId\022\020\n\014GetHo"
    "stReqId\020\001\022\020\n\014GetHostRspId\020\002\022\017\n\013ReportReq"
    "Id\020\003\022\027\n\023GetRouteByToolReqId\020\004\022\027\n\023GetRout"
    "eByToolRspId\020\005\022\030\n\024GetRouteByAgentReqId\020\006"
    "\022\030\n\024GetRouteByAgentRspId\020\007\022\025\n\021ReportStat"
    "usReqId\020\010\022\026\n\022CacheGetRouteReqId\020\t\022\026\n\022Cac"
    "heGetRouteRspId\020\n\022\026\n\022CacheBatchRptReqId\020"
    "\013", 1241);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "elb.proto", &protobuf_RegisterTypes);
  HostAddr::default_instance_ = new HostAddr();
  GetHostReq::default_instance_ = new GetHostReq();
  GetHostRsp::default_instance_ = new GetHostRsp();
  ReportReq::default_instance_ = new ReportReq();
  GetRouteReq::default_instance_ = new GetRouteReq();
  GetRouteRsp::default_instance_ = new GetRouteRsp();
  HostCallResult::default_instance_ = new HostCallResult();
  ReportStatusReq::default_instance_ = new ReportStatusReq();
  CacheGetRouteReq::default_instance_ = new CacheGetRouteReq();
  CacheGetRouteRsp::default_instance_ = new CacheGetRouteRsp();
  HostBatchCallRes::default_instance_ = new HostBatchCallRes();
  CacheBatchRptReq::default_instance_ = new CacheBatchRptReq();
  HostAddr::default_instance_->InitAsDefaultInstance();
  GetHostReq::default_instance_->InitAsDefaultInstance();
  GetHostRsp::default_instance_->InitAsDefaultInstance();
  ReportReq::default_instance_->InitAsDefaultInstance();
  GetRouteReq::default_instance_->InitAsDefaultInstance();
  GetRouteRsp::default_instance_->InitAsDefaultInstance();
  HostCallResult::default_instance_->InitAsDefaultInstance();
  ReportStatusReq::default_instance_->InitAsDefaultInstance();
  CacheGetRouteReq::default_instance_->InitAsDefaultInstance();
  CacheGetRouteRsp::default_instance_->InitAsDefaultInstance();
  HostBatchCallRes::default_instance_->InitAsDefaultInstance();
  CacheBatchRptReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_elb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_elb_2eproto {
  StaticDescriptorInitializer_elb_2eproto() {
    protobuf_AddDesc_elb_2eproto();
  }
} static_descriptor_initializer_elb_2eproto_;
const ::google::protobuf::EnumDescriptor* MsgTypeId_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgTypeId_descriptor_;
}
bool MsgTypeId_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int HostAddr::kIpFieldNumber;
const int HostAddr::kPortFieldNumber;
#endif  // !_MSC_VER

HostAddr::HostAddr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:elb.HostAddr)
}

void HostAddr::InitAsDefaultInstance() {
}

HostAddr::HostAddr(const HostAddr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:elb.HostAddr)
}

void HostAddr::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0;
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HostAddr::~HostAddr() {
  // @@protoc_insertion_point(destructor:elb.HostAddr)
  SharedDtor();
}

void HostAddr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HostAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HostAddr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HostAddr_descriptor_;
}

const HostAddr& HostAddr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_elb_2eproto();
  return *default_instance_;
}

HostAddr* HostAddr::default_instance_ = NULL;

HostAddr* HostAddr::New() const {
  return new HostAddr;
}

void HostAddr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HostAddr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ip_, port_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HostAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:elb.HostAddr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ip = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:elb.HostAddr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:elb.HostAddr)
  return false;
#undef DO_
}

void HostAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:elb.HostAddr)
  // required int32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ip(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:elb.HostAddr)
}

::google::protobuf::uint8* HostAddr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:elb.HostAddr)
  // required int32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ip(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:elb.HostAddr)
  return target;
}

int HostAddr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ip());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostAddr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HostAddr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HostAddr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HostAddr::MergeFrom(const HostAddr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HostAddr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostAddr::CopyFrom(const HostAddr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostAddr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HostAddr::Swap(HostAddr* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HostAddr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HostAddr_descriptor_;
  metadata.reflection = HostAddr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetHostReq::kSeqFieldNumber;
const int GetHostReq::kModidFieldNumber;
const int GetHostReq::kCmdidFieldNumber;
#endif  // !_MSC_VER

GetHostReq::GetHostReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:elb.GetHostReq)
}

void GetHostReq::InitAsDefaultInstance() {
}

GetHostReq::GetHostReq(const GetHostReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:elb.GetHostReq)
}

void GetHostReq::SharedCtor() {
  _cached_size_ = 0;
  seq_ = 0u;
  modid_ = 0;
  cmdid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetHostReq::~GetHostReq() {
  // @@protoc_insertion_point(destructor:elb.GetHostReq)
  SharedDtor();
}

void GetHostReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetHostReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetHostReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetHostReq_descriptor_;
}

const GetHostReq& GetHostReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_elb_2eproto();
  return *default_instance_;
}

GetHostReq* GetHostReq::default_instance_ = NULL;

GetHostReq* GetHostReq::New() const {
  return new GetHostReq;
}

void GetHostReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetHostReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(seq_, cmdid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetHostReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:elb.GetHostReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_modid;
        break;
      }

      // required int32 modid = 2;
      case 2: {
        if (tag == 16) {
         parse_modid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cmdid;
        break;
      }

      // required int32 cmdid = 3;
      case 3: {
        if (tag == 24) {
         parse_cmdid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
          set_has_cmdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:elb.GetHostReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:elb.GetHostReq)
  return false;
#undef DO_
}

void GetHostReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:elb.GetHostReq)
  // required uint32 seq = 1;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seq(), output);
  }

  // required int32 modid = 2;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->modid(), output);
  }

  // required int32 cmdid = 3;
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cmdid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:elb.GetHostReq)
}

::google::protobuf::uint8* GetHostReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:elb.GetHostReq)
  // required uint32 seq = 1;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seq(), target);
  }

  // required int32 modid = 2;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->modid(), target);
  }

  // required int32 cmdid = 3;
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cmdid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:elb.GetHostReq)
  return target;
}

int GetHostReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seq = 1;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

    // required int32 modid = 2;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modid());
    }

    // required int32 cmdid = 3;
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmdid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetHostReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetHostReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetHostReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetHostReq::MergeFrom(const GetHostReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetHostReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHostReq::CopyFrom(const GetHostReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHostReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetHostReq::Swap(GetHostReq* other) {
  if (other != this) {
    std::swap(seq_, other->seq_);
    std::swap(modid_, other->modid_);
    std::swap(cmdid_, other->cmdid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetHostReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetHostReq_descriptor_;
  metadata.reflection = GetHostReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetHostRsp::kSeqFieldNumber;
const int GetHostRsp::kModidFieldNumber;
const int GetHostRsp::kCmdidFieldNumber;
const int GetHostRsp::kRetcodeFieldNumber;
const int GetHostRsp::kHostFieldNumber;
#endif  // !_MSC_VER

GetHostRsp::GetHostRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:elb.GetHostRsp)
}

void GetHostRsp::InitAsDefaultInstance() {
  host_ = const_cast< ::elb::HostAddr*>(&::elb::HostAddr::default_instance());
}

GetHostRsp::GetHostRsp(const GetHostRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:elb.GetHostRsp)
}

void GetHostRsp::SharedCtor() {
  _cached_size_ = 0;
  seq_ = 0u;
  modid_ = 0;
  cmdid_ = 0;
  retcode_ = 0;
  host_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetHostRsp::~GetHostRsp() {
  // @@protoc_insertion_point(destructor:elb.GetHostRsp)
  SharedDtor();
}

void GetHostRsp::SharedDtor() {
  if (this != default_instance_) {
    delete host_;
  }
}

void GetHostRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetHostRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetHostRsp_descriptor_;
}

const GetHostRsp& GetHostRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_elb_2eproto();
  return *default_instance_;
}

GetHostRsp* GetHostRsp::default_instance_ = NULL;

GetHostRsp* GetHostRsp::New() const {
  return new GetHostRsp;
}

void GetHostRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetHostRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(seq_, retcode_);
    if (has_host()) {
      if (host_ != NULL) host_->::elb::HostAddr::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetHostRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:elb.GetHostRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 seq = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_modid;
        break;
      }

      // required int32 modid = 2;
      case 2: {
        if (tag == 16) {
         parse_modid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cmdid;
        break;
      }

      // required int32 cmdid = 3;
      case 3: {
        if (tag == 24) {
         parse_cmdid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
          set_has_cmdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_retcode;
        break;
      }

      // required int32 retcode = 4;
      case 4: {
        if (tag == 32) {
         parse_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_host;
        break;
      }

      // optional .elb.HostAddr host = 5;
      case 5: {
        if (tag == 42) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_host()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:elb.GetHostRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:elb.GetHostRsp)
  return false;
#undef DO_
}

void GetHostRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:elb.GetHostRsp)
  // required uint32 seq = 1;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seq(), output);
  }

  // required int32 modid = 2;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->modid(), output);
  }

  // required int32 cmdid = 3;
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cmdid(), output);
  }

  // required int32 retcode = 4;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->retcode(), output);
  }

  // optional .elb.HostAddr host = 5;
  if (has_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->host(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:elb.GetHostRsp)
}

::google::protobuf::uint8* GetHostRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:elb.GetHostRsp)
  // required uint32 seq = 1;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seq(), target);
  }

  // required int32 modid = 2;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->modid(), target);
  }

  // required int32 cmdid = 3;
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cmdid(), target);
  }

  // required int32 retcode = 4;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->retcode(), target);
  }

  // optional .elb.HostAddr host = 5;
  if (has_host()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->host(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:elb.GetHostRsp)
  return target;
}

int GetHostRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 seq = 1;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

    // required int32 modid = 2;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modid());
    }

    // required int32 cmdid = 3;
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmdid());
    }

    // required int32 retcode = 4;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional .elb.HostAddr host = 5;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->host());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetHostRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetHostRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetHostRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetHostRsp::MergeFrom(const GetHostRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seq()) {
      set_seq(from.seq());
    }
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_host()) {
      mutable_host()->::elb::HostAddr::MergeFrom(from.host());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetHostRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHostRsp::CopyFrom(const GetHostRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHostRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_host()) {
    if (!this->host().IsInitialized()) return false;
  }
  return true;
}

void GetHostRsp::Swap(GetHostRsp* other) {
  if (other != this) {
    std::swap(seq_, other->seq_);
    std::swap(modid_, other->modid_);
    std::swap(cmdid_, other->cmdid_);
    std::swap(retcode_, other->retcode_);
    std::swap(host_, other->host_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetHostRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetHostRsp_descriptor_;
  metadata.reflection = GetHostRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportReq::kModidFieldNumber;
const int ReportReq::kCmdidFieldNumber;
const int ReportReq::kHostFieldNumber;
const int ReportReq::kRetcodeFieldNumber;
const int ReportReq::kTcostFieldNumber;
#endif  // !_MSC_VER

ReportReq::ReportReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:elb.ReportReq)
}

void ReportReq::InitAsDefaultInstance() {
  host_ = const_cast< ::elb::HostAddr*>(&::elb::HostAddr::default_instance());
}

ReportReq::ReportReq(const ReportReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:elb.ReportReq)
}

void ReportReq::SharedCtor() {
  _cached_size_ = 0;
  modid_ = 0;
  cmdid_ = 0;
  host_ = NULL;
  retcode_ = 0;
  tcost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportReq::~ReportReq() {
  // @@protoc_insertion_point(destructor:elb.ReportReq)
  SharedDtor();
}

void ReportReq::SharedDtor() {
  if (this != default_instance_) {
    delete host_;
  }
}

void ReportReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportReq_descriptor_;
}

const ReportReq& ReportReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_elb_2eproto();
  return *default_instance_;
}

ReportReq* ReportReq::default_instance_ = NULL;

ReportReq* ReportReq::New() const {
  return new ReportReq;
}

void ReportReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReportReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(modid_, cmdid_);
    ZR_(retcode_, tcost_);
    if (has_host()) {
      if (host_ != NULL) host_->::elb::HostAddr::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:elb.ReportReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 modid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmdid;
        break;
      }

      // required int32 cmdid = 2;
      case 2: {
        if (tag == 16) {
         parse_cmdid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
          set_has_cmdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_host;
        break;
      }

      // required .elb.HostAddr host = 3;
      case 3: {
        if (tag == 26) {
         parse_host:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_host()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_retcode;
        break;
      }

      // required int32 retcode = 4;
      case 4: {
        if (tag == 32) {
         parse_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tcost;
        break;
      }

      // optional uint32 tcost = 5;
      case 5: {
        if (tag == 40) {
         parse_tcost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcost_)));
          set_has_tcost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:elb.ReportReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:elb.ReportReq)
  return false;
#undef DO_
}

void ReportReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:elb.ReportReq)
  // required int32 modid = 1;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modid(), output);
  }

  // required int32 cmdid = 2;
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmdid(), output);
  }

  // required .elb.HostAddr host = 3;
  if (has_host()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->host(), output);
  }

  // required int32 retcode = 4;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->retcode(), output);
  }

  // optional uint32 tcost = 5;
  if (has_tcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->tcost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:elb.ReportReq)
}

::google::protobuf::uint8* ReportReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:elb.ReportReq)
  // required int32 modid = 1;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modid(), target);
  }

  // required int32 cmdid = 2;
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmdid(), target);
  }

  // required .elb.HostAddr host = 3;
  if (has_host()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->host(), target);
  }

  // required int32 retcode = 4;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->retcode(), target);
  }

  // optional uint32 tcost = 5;
  if (has_tcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->tcost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:elb.ReportReq)
  return target;
}

int ReportReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 modid = 1;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modid());
    }

    // required int32 cmdid = 2;
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmdid());
    }

    // required .elb.HostAddr host = 3;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->host());
    }

    // required int32 retcode = 4;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional uint32 tcost = 5;
    if (has_tcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tcost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportReq::MergeFrom(const ReportReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_host()) {
      mutable_host()->::elb::HostAddr::MergeFrom(from.host());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_tcost()) {
      set_tcost(from.tcost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportReq::CopyFrom(const ReportReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_host()) {
    if (!this->host().IsInitialized()) return false;
  }
  return true;
}

void ReportReq::Swap(ReportReq* other) {
  if (other != this) {
    std::swap(modid_, other->modid_);
    std::swap(cmdid_, other->cmdid_);
    std::swap(host_, other->host_);
    std::swap(retcode_, other->retcode_);
    std::swap(tcost_, other->tcost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportReq_descriptor_;
  metadata.reflection = ReportReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRouteReq::kModidFieldNumber;
const int GetRouteReq::kCmdidFieldNumber;
#endif  // !_MSC_VER

GetRouteReq::GetRouteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:elb.GetRouteReq)
}

void GetRouteReq::InitAsDefaultInstance() {
}

GetRouteReq::GetRouteReq(const GetRouteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:elb.GetRouteReq)
}

void GetRouteReq::SharedCtor() {
  _cached_size_ = 0;
  modid_ = 0;
  cmdid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRouteReq::~GetRouteReq() {
  // @@protoc_insertion_point(destructor:elb.GetRouteReq)
  SharedDtor();
}

void GetRouteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRouteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRouteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRouteReq_descriptor_;
}

const GetRouteReq& GetRouteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_elb_2eproto();
  return *default_instance_;
}

GetRouteReq* GetRouteReq::default_instance_ = NULL;

GetRouteReq* GetRouteReq::New() const {
  return new GetRouteReq;
}

void GetRouteReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetRouteReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(modid_, cmdid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRouteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:elb.GetRouteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 modid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmdid;
        break;
      }

      // required int32 cmdid = 2;
      case 2: {
        if (tag == 16) {
         parse_cmdid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
          set_has_cmdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:elb.GetRouteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:elb.GetRouteReq)
  return false;
#undef DO_
}

void GetRouteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:elb.GetRouteReq)
  // required int32 modid = 1;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modid(), output);
  }

  // required int32 cmdid = 2;
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmdid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:elb.GetRouteReq)
}

::google::protobuf::uint8* GetRouteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:elb.GetRouteReq)
  // required int32 modid = 1;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modid(), target);
  }

  // required int32 cmdid = 2;
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmdid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:elb.GetRouteReq)
  return target;
}

int GetRouteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 modid = 1;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modid());
    }

    // required int32 cmdid = 2;
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmdid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRouteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRouteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRouteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRouteReq::MergeFrom(const GetRouteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRouteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRouteReq::CopyFrom(const GetRouteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRouteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetRouteReq::Swap(GetRouteReq* other) {
  if (other != this) {
    std::swap(modid_, other->modid_);
    std::swap(cmdid_, other->cmdid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRouteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRouteReq_descriptor_;
  metadata.reflection = GetRouteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRouteRsp::kModidFieldNumber;
const int GetRouteRsp::kCmdidFieldNumber;
const int GetRouteRsp::kHostsFieldNumber;
#endif  // !_MSC_VER

GetRouteRsp::GetRouteRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:elb.GetRouteRsp)
}

void GetRouteRsp::InitAsDefaultInstance() {
}

GetRouteRsp::GetRouteRsp(const GetRouteRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:elb.GetRouteRsp)
}

void GetRouteRsp::SharedCtor() {
  _cached_size_ = 0;
  modid_ = 0;
  cmdid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRouteRsp::~GetRouteRsp() {
  // @@protoc_insertion_point(destructor:elb.GetRouteRsp)
  SharedDtor();
}

void GetRouteRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRouteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRouteRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRouteRsp_descriptor_;
}

const GetRouteRsp& GetRouteRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_elb_2eproto();
  return *default_instance_;
}

GetRouteRsp* GetRouteRsp::default_instance_ = NULL;

GetRouteRsp* GetRouteRsp::New() const {
  return new GetRouteRsp;
}

void GetRouteRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetRouteRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(modid_, cmdid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  hosts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRouteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:elb.GetRouteRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 modid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmdid;
        break;
      }

      // required int32 cmdid = 2;
      case 2: {
        if (tag == 16) {
         parse_cmdid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
          set_has_cmdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hosts;
        break;
      }

      // repeated .elb.HostAddr hosts = 3;
      case 3: {
        if (tag == 26) {
         parse_hosts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hosts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_hosts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:elb.GetRouteRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:elb.GetRouteRsp)
  return false;
#undef DO_
}

void GetRouteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:elb.GetRouteRsp)
  // required int32 modid = 1;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modid(), output);
  }

  // required int32 cmdid = 2;
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmdid(), output);
  }

  // repeated .elb.HostAddr hosts = 3;
  for (int i = 0; i < this->hosts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hosts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:elb.GetRouteRsp)
}

::google::protobuf::uint8* GetRouteRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:elb.GetRouteRsp)
  // required int32 modid = 1;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modid(), target);
  }

  // required int32 cmdid = 2;
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmdid(), target);
  }

  // repeated .elb.HostAddr hosts = 3;
  for (int i = 0; i < this->hosts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hosts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:elb.GetRouteRsp)
  return target;
}

int GetRouteRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 modid = 1;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modid());
    }

    // required int32 cmdid = 2;
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmdid());
    }

  }
  // repeated .elb.HostAddr hosts = 3;
  total_size += 1 * this->hosts_size();
  for (int i = 0; i < this->hosts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hosts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRouteRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRouteRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRouteRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRouteRsp::MergeFrom(const GetRouteRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  hosts_.MergeFrom(from.hosts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRouteRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRouteRsp::CopyFrom(const GetRouteRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRouteRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->hosts())) return false;
  return true;
}

void GetRouteRsp::Swap(GetRouteRsp* other) {
  if (other != this) {
    std::swap(modid_, other->modid_);
    std::swap(cmdid_, other->cmdid_);
    hosts_.Swap(&other->hosts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRouteRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRouteRsp_descriptor_;
  metadata.reflection = GetRouteRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HostCallResult::kIpFieldNumber;
const int HostCallResult::kPortFieldNumber;
const int HostCallResult::kSuccFieldNumber;
const int HostCallResult::kErrFieldNumber;
const int HostCallResult::kOverloadFieldNumber;
#endif  // !_MSC_VER

HostCallResult::HostCallResult()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:elb.HostCallResult)
}

void HostCallResult::InitAsDefaultInstance() {
}

HostCallResult::HostCallResult(const HostCallResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:elb.HostCallResult)
}

void HostCallResult::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0;
  port_ = 0;
  succ_ = 0u;
  err_ = 0u;
  overload_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HostCallResult::~HostCallResult() {
  // @@protoc_insertion_point(destructor:elb.HostCallResult)
  SharedDtor();
}

void HostCallResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HostCallResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HostCallResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HostCallResult_descriptor_;
}

const HostCallResult& HostCallResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_elb_2eproto();
  return *default_instance_;
}

HostCallResult* HostCallResult::default_instance_ = NULL;

HostCallResult* HostCallResult::New() const {
  return new HostCallResult;
}

void HostCallResult::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HostCallResult*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(ip_, overload_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HostCallResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:elb.HostCallResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ip = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_succ;
        break;
      }

      // required uint32 succ = 3;
      case 3: {
        if (tag == 24) {
         parse_succ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &succ_)));
          set_has_succ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_err;
        break;
      }

      // required uint32 err = 4;
      case 4: {
        if (tag == 32) {
         parse_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_overload;
        break;
      }

      // required bool overload = 5;
      case 5: {
        if (tag == 40) {
         parse_overload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overload_)));
          set_has_overload();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:elb.HostCallResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:elb.HostCallResult)
  return false;
#undef DO_
}

void HostCallResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:elb.HostCallResult)
  // required int32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ip(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // required uint32 succ = 3;
  if (has_succ()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->succ(), output);
  }

  // required uint32 err = 4;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->err(), output);
  }

  // required bool overload = 5;
  if (has_overload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->overload(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:elb.HostCallResult)
}

::google::protobuf::uint8* HostCallResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:elb.HostCallResult)
  // required int32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ip(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // required uint32 succ = 3;
  if (has_succ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->succ(), target);
  }

  // required uint32 err = 4;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->err(), target);
  }

  // required bool overload = 5;
  if (has_overload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->overload(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:elb.HostCallResult)
  return target;
}

int HostCallResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ip());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // required uint32 succ = 3;
    if (has_succ()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->succ());
    }

    // required uint32 err = 4;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->err());
    }

    // required bool overload = 5;
    if (has_overload()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostCallResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HostCallResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HostCallResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HostCallResult::MergeFrom(const HostCallResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_succ()) {
      set_succ(from.succ());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_overload()) {
      set_overload(from.overload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HostCallResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostCallResult::CopyFrom(const HostCallResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostCallResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void HostCallResult::Swap(HostCallResult* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(succ_, other->succ_);
    std::swap(err_, other->err_);
    std::swap(overload_, other->overload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HostCallResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HostCallResult_descriptor_;
  metadata.reflection = HostCallResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReportStatusReq::kModidFieldNumber;
const int ReportStatusReq::kCmdidFieldNumber;
const int ReportStatusReq::kCallerFieldNumber;
const int ReportStatusReq::kResultsFieldNumber;
const int ReportStatusReq::kTsFieldNumber;
#endif  // !_MSC_VER

ReportStatusReq::ReportStatusReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:elb.ReportStatusReq)
}

void ReportStatusReq::InitAsDefaultInstance() {
}

ReportStatusReq::ReportStatusReq(const ReportStatusReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:elb.ReportStatusReq)
}

void ReportStatusReq::SharedCtor() {
  _cached_size_ = 0;
  modid_ = 0;
  cmdid_ = 0;
  caller_ = 0;
  ts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReportStatusReq::~ReportStatusReq() {
  // @@protoc_insertion_point(destructor:elb.ReportStatusReq)
  SharedDtor();
}

void ReportStatusReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReportStatusReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReportStatusReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReportStatusReq_descriptor_;
}

const ReportStatusReq& ReportStatusReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_elb_2eproto();
  return *default_instance_;
}

ReportStatusReq* ReportStatusReq::default_instance_ = NULL;

ReportStatusReq* ReportStatusReq::New() const {
  return new ReportStatusReq;
}

void ReportStatusReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReportStatusReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(modid_, cmdid_);
  ZR_(caller_, ts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReportStatusReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:elb.ReportStatusReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 modid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmdid;
        break;
      }

      // required int32 cmdid = 2;
      case 2: {
        if (tag == 16) {
         parse_cmdid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
          set_has_cmdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_caller;
        break;
      }

      // required int32 caller = 3;
      case 3: {
        if (tag == 24) {
         parse_caller:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &caller_)));
          set_has_caller();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_results;
        break;
      }

      // repeated .elb.HostCallResult results = 4;
      case 4: {
        if (tag == 34) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_results;
        if (input->ExpectTag(40)) goto parse_ts;
        break;
      }

      // required uint32 ts = 5;
      case 5: {
        if (tag == 40) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:elb.ReportStatusReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:elb.ReportStatusReq)
  return false;
#undef DO_
}

void ReportStatusReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:elb.ReportStatusReq)
  // required int32 modid = 1;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modid(), output);
  }

  // required int32 cmdid = 2;
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmdid(), output);
  }

  // required int32 caller = 3;
  if (has_caller()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->caller(), output);
  }

  // repeated .elb.HostCallResult results = 4;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->results(i), output);
  }

  // required uint32 ts = 5;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:elb.ReportStatusReq)
}

::google::protobuf::uint8* ReportStatusReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:elb.ReportStatusReq)
  // required int32 modid = 1;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modid(), target);
  }

  // required int32 cmdid = 2;
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmdid(), target);
  }

  // required int32 caller = 3;
  if (has_caller()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->caller(), target);
  }

  // repeated .elb.HostCallResult results = 4;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->results(i), target);
  }

  // required uint32 ts = 5;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:elb.ReportStatusReq)
  return target;
}

int ReportStatusReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 modid = 1;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modid());
    }

    // required int32 cmdid = 2;
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmdid());
    }

    // required int32 caller = 3;
    if (has_caller()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->caller());
    }

    // required uint32 ts = 5;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

  }
  // repeated .elb.HostCallResult results = 4;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReportStatusReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReportStatusReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReportStatusReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReportStatusReq::MergeFrom(const ReportStatusReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_caller()) {
      set_caller(from.caller());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReportStatusReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportStatusReq::CopyFrom(const ReportStatusReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportStatusReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->results())) return false;
  return true;
}

void ReportStatusReq::Swap(ReportStatusReq* other) {
  if (other != this) {
    std::swap(modid_, other->modid_);
    std::swap(cmdid_, other->cmdid_);
    std::swap(caller_, other->caller_);
    results_.Swap(&other->results_);
    std::swap(ts_, other->ts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReportStatusReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReportStatusReq_descriptor_;
  metadata.reflection = ReportStatusReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CacheGetRouteReq::kModidFieldNumber;
const int CacheGetRouteReq::kCmdidFieldNumber;
const int CacheGetRouteReq::kVersionFieldNumber;
#endif  // !_MSC_VER

CacheGetRouteReq::CacheGetRouteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:elb.CacheGetRouteReq)
}

void CacheGetRouteReq::InitAsDefaultInstance() {
}

CacheGetRouteReq::CacheGetRouteReq(const CacheGetRouteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:elb.CacheGetRouteReq)
}

void CacheGetRouteReq::SharedCtor() {
  _cached_size_ = 0;
  modid_ = 0;
  cmdid_ = 0;
  version_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CacheGetRouteReq::~CacheGetRouteReq() {
  // @@protoc_insertion_point(destructor:elb.CacheGetRouteReq)
  SharedDtor();
}

void CacheGetRouteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CacheGetRouteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CacheGetRouteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CacheGetRouteReq_descriptor_;
}

const CacheGetRouteReq& CacheGetRouteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_elb_2eproto();
  return *default_instance_;
}

CacheGetRouteReq* CacheGetRouteReq::default_instance_ = NULL;

CacheGetRouteReq* CacheGetRouteReq::New() const {
  return new CacheGetRouteReq;
}

void CacheGetRouteReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CacheGetRouteReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(modid_, version_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CacheGetRouteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:elb.CacheGetRouteReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 modid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmdid;
        break;
      }

      // required int32 cmdid = 2;
      case 2: {
        if (tag == 16) {
         parse_cmdid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
          set_has_cmdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // required int64 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:elb.CacheGetRouteReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:elb.CacheGetRouteReq)
  return false;
#undef DO_
}

void CacheGetRouteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:elb.CacheGetRouteReq)
  // required int32 modid = 1;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modid(), output);
  }

  // required int32 cmdid = 2;
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmdid(), output);
  }

  // required int64 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:elb.CacheGetRouteReq)
}

::google::protobuf::uint8* CacheGetRouteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:elb.CacheGetRouteReq)
  // required int32 modid = 1;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modid(), target);
  }

  // required int32 cmdid = 2;
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmdid(), target);
  }

  // required int64 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:elb.CacheGetRouteReq)
  return target;
}

int CacheGetRouteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 modid = 1;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modid());
    }

    // required int32 cmdid = 2;
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmdid());
    }

    // required int64 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheGetRouteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CacheGetRouteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CacheGetRouteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CacheGetRouteReq::MergeFrom(const CacheGetRouteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CacheGetRouteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheGetRouteReq::CopyFrom(const CacheGetRouteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheGetRouteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CacheGetRouteReq::Swap(CacheGetRouteReq* other) {
  if (other != this) {
    std::swap(modid_, other->modid_);
    std::swap(cmdid_, other->cmdid_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CacheGetRouteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CacheGetRouteReq_descriptor_;
  metadata.reflection = CacheGetRouteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CacheGetRouteRsp::kModidFieldNumber;
const int CacheGetRouteRsp::kCmdidFieldNumber;
const int CacheGetRouteRsp::kVersionFieldNumber;
const int CacheGetRouteRsp::kOverloadFieldNumber;
const int CacheGetRouteRsp::kRouteFieldNumber;
#endif  // !_MSC_VER

CacheGetRouteRsp::CacheGetRouteRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:elb.CacheGetRouteRsp)
}

void CacheGetRouteRsp::InitAsDefaultInstance() {
}

CacheGetRouteRsp::CacheGetRouteRsp(const CacheGetRouteRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:elb.CacheGetRouteRsp)
}

void CacheGetRouteRsp::SharedCtor() {
  _cached_size_ = 0;
  modid_ = 0;
  cmdid_ = 0;
  version_ = GOOGLE_LONGLONG(0);
  overload_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CacheGetRouteRsp::~CacheGetRouteRsp() {
  // @@protoc_insertion_point(destructor:elb.CacheGetRouteRsp)
  SharedDtor();
}

void CacheGetRouteRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CacheGetRouteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CacheGetRouteRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CacheGetRouteRsp_descriptor_;
}

const CacheGetRouteRsp& CacheGetRouteRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_elb_2eproto();
  return *default_instance_;
}

CacheGetRouteRsp* CacheGetRouteRsp::default_instance_ = NULL;

CacheGetRouteRsp* CacheGetRouteRsp::New() const {
  return new CacheGetRouteRsp;
}

void CacheGetRouteRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CacheGetRouteRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(modid_, version_);
    overload_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  route_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CacheGetRouteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:elb.CacheGetRouteRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 modid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmdid;
        break;
      }

      // required int32 cmdid = 2;
      case 2: {
        if (tag == 16) {
         parse_cmdid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
          set_has_cmdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // required int64 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_overload;
        break;
      }

      // optional bool overload = 4;
      case 4: {
        if (tag == 32) {
         parse_overload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overload_)));
          set_has_overload();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_route;
        break;
      }

      // repeated .elb.HostAddr route = 5;
      case 5: {
        if (tag == 42) {
         parse_route:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_route()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_route;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:elb.CacheGetRouteRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:elb.CacheGetRouteRsp)
  return false;
#undef DO_
}

void CacheGetRouteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:elb.CacheGetRouteRsp)
  // required int32 modid = 1;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modid(), output);
  }

  // required int32 cmdid = 2;
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmdid(), output);
  }

  // required int64 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->version(), output);
  }

  // optional bool overload = 4;
  if (has_overload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->overload(), output);
  }

  // repeated .elb.HostAddr route = 5;
  for (int i = 0; i < this->route_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->route(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:elb.CacheGetRouteRsp)
}

::google::protobuf::uint8* CacheGetRouteRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:elb.CacheGetRouteRsp)
  // required int32 modid = 1;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modid(), target);
  }

  // required int32 cmdid = 2;
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmdid(), target);
  }

  // required int64 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->version(), target);
  }

  // optional bool overload = 4;
  if (has_overload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->overload(), target);
  }

  // repeated .elb.HostAddr route = 5;
  for (int i = 0; i < this->route_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->route(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:elb.CacheGetRouteRsp)
  return target;
}

int CacheGetRouteRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 modid = 1;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modid());
    }

    // required int32 cmdid = 2;
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmdid());
    }

    // required int64 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->version());
    }

    // optional bool overload = 4;
    if (has_overload()) {
      total_size += 1 + 1;
    }

  }
  // repeated .elb.HostAddr route = 5;
  total_size += 1 * this->route_size();
  for (int i = 0; i < this->route_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->route(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheGetRouteRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CacheGetRouteRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CacheGetRouteRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CacheGetRouteRsp::MergeFrom(const CacheGetRouteRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  route_.MergeFrom(from.route_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_overload()) {
      set_overload(from.overload());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CacheGetRouteRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheGetRouteRsp::CopyFrom(const CacheGetRouteRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheGetRouteRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->route())) return false;
  return true;
}

void CacheGetRouteRsp::Swap(CacheGetRouteRsp* other) {
  if (other != this) {
    std::swap(modid_, other->modid_);
    std::swap(cmdid_, other->cmdid_);
    std::swap(version_, other->version_);
    std::swap(overload_, other->overload_);
    route_.Swap(&other->route_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CacheGetRouteRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CacheGetRouteRsp_descriptor_;
  metadata.reflection = CacheGetRouteRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HostBatchCallRes::kIpFieldNumber;
const int HostBatchCallRes::kPortFieldNumber;
const int HostBatchCallRes::kSuccCntFieldNumber;
#endif  // !_MSC_VER

HostBatchCallRes::HostBatchCallRes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:elb.HostBatchCallRes)
}

void HostBatchCallRes::InitAsDefaultInstance() {
}

HostBatchCallRes::HostBatchCallRes(const HostBatchCallRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:elb.HostBatchCallRes)
}

void HostBatchCallRes::SharedCtor() {
  _cached_size_ = 0;
  ip_ = 0;
  port_ = 0;
  succcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HostBatchCallRes::~HostBatchCallRes() {
  // @@protoc_insertion_point(destructor:elb.HostBatchCallRes)
  SharedDtor();
}

void HostBatchCallRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HostBatchCallRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HostBatchCallRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HostBatchCallRes_descriptor_;
}

const HostBatchCallRes& HostBatchCallRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_elb_2eproto();
  return *default_instance_;
}

HostBatchCallRes* HostBatchCallRes::default_instance_ = NULL;

HostBatchCallRes* HostBatchCallRes::New() const {
  return new HostBatchCallRes;
}

void HostBatchCallRes::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HostBatchCallRes*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ip_, succcnt_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HostBatchCallRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:elb.HostBatchCallRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ip = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ip_)));
          set_has_ip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_succCnt;
        break;
      }

      // required uint32 succCnt = 3;
      case 3: {
        if (tag == 24) {
         parse_succCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &succcnt_)));
          set_has_succcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:elb.HostBatchCallRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:elb.HostBatchCallRes)
  return false;
#undef DO_
}

void HostBatchCallRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:elb.HostBatchCallRes)
  // required int32 ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ip(), output);
  }

  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // required uint32 succCnt = 3;
  if (has_succcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->succcnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:elb.HostBatchCallRes)
}

::google::protobuf::uint8* HostBatchCallRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:elb.HostBatchCallRes)
  // required int32 ip = 1;
  if (has_ip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ip(), target);
  }

  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // required uint32 succCnt = 3;
  if (has_succcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->succcnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:elb.HostBatchCallRes)
  return target;
}

int HostBatchCallRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ip());
    }

    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // required uint32 succCnt = 3;
    if (has_succcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->succcnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostBatchCallRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HostBatchCallRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HostBatchCallRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HostBatchCallRes::MergeFrom(const HostBatchCallRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_succcnt()) {
      set_succcnt(from.succcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HostBatchCallRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostBatchCallRes::CopyFrom(const HostBatchCallRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostBatchCallRes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void HostBatchCallRes::Swap(HostBatchCallRes* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(succcnt_, other->succcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HostBatchCallRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HostBatchCallRes_descriptor_;
  metadata.reflection = HostBatchCallRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CacheBatchRptReq::kModidFieldNumber;
const int CacheBatchRptReq::kCmdidFieldNumber;
const int CacheBatchRptReq::kResultsFieldNumber;
#endif  // !_MSC_VER

CacheBatchRptReq::CacheBatchRptReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:elb.CacheBatchRptReq)
}

void CacheBatchRptReq::InitAsDefaultInstance() {
}

CacheBatchRptReq::CacheBatchRptReq(const CacheBatchRptReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:elb.CacheBatchRptReq)
}

void CacheBatchRptReq::SharedCtor() {
  _cached_size_ = 0;
  modid_ = 0;
  cmdid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CacheBatchRptReq::~CacheBatchRptReq() {
  // @@protoc_insertion_point(destructor:elb.CacheBatchRptReq)
  SharedDtor();
}

void CacheBatchRptReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CacheBatchRptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CacheBatchRptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CacheBatchRptReq_descriptor_;
}

const CacheBatchRptReq& CacheBatchRptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_elb_2eproto();
  return *default_instance_;
}

CacheBatchRptReq* CacheBatchRptReq::default_instance_ = NULL;

CacheBatchRptReq* CacheBatchRptReq::New() const {
  return new CacheBatchRptReq;
}

void CacheBatchRptReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CacheBatchRptReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(modid_, cmdid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CacheBatchRptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:elb.CacheBatchRptReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 modid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cmdid;
        break;
      }

      // required int32 cmdid = 2;
      case 2: {
        if (tag == 16) {
         parse_cmdid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
          set_has_cmdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_results;
        break;
      }

      // repeated .elb.HostBatchCallRes results = 3;
      case 3: {
        if (tag == 26) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_results;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:elb.CacheBatchRptReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:elb.CacheBatchRptReq)
  return false;
#undef DO_
}

void CacheBatchRptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:elb.CacheBatchRptReq)
  // required int32 modid = 1;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->modid(), output);
  }

  // required int32 cmdid = 2;
  if (has_cmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cmdid(), output);
  }

  // repeated .elb.HostBatchCallRes results = 3;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->results(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:elb.CacheBatchRptReq)
}

::google::protobuf::uint8* CacheBatchRptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:elb.CacheBatchRptReq)
  // required int32 modid = 1;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->modid(), target);
  }

  // required int32 cmdid = 2;
  if (has_cmdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cmdid(), target);
  }

  // repeated .elb.HostBatchCallRes results = 3;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->results(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:elb.CacheBatchRptReq)
  return target;
}

int CacheBatchRptReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 modid = 1;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modid());
    }

    // required int32 cmdid = 2;
    if (has_cmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmdid());
    }

  }
  // repeated .elb.HostBatchCallRes results = 3;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CacheBatchRptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CacheBatchRptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CacheBatchRptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CacheBatchRptReq::MergeFrom(const CacheBatchRptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CacheBatchRptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CacheBatchRptReq::CopyFrom(const CacheBatchRptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CacheBatchRptReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->results())) return false;
  return true;
}

void CacheBatchRptReq::Swap(CacheBatchRptReq* other) {
  if (other != this) {
    std::swap(modid_, other->modid_);
    std::swap(cmdid_, other->cmdid_);
    results_.Swap(&other->results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CacheBatchRptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CacheBatchRptReq_descriptor_;
  metadata.reflection = CacheBatchRptReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace elb

// @@protoc_insertion_point(global_scope)
