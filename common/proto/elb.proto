package elb;

enum MsgTypeId {
    GetHostReqId         = 1; //api get a host from agent
    GetHostRspId         = 2; //agent give a host to api
    ReportReqId          = 3; //api report call result to agent
    GetRouteByToolReqId  = 4; //tool get route from agent
    GetRouteByToolRspId  = 5; //agent give route to tool
    RecordLbReqId        = 6; //tool let agent record lb information
    GetRouteByAgentReqId = 7; //agent get route from dnsserver
    GetRouteByAgentRspId = 8; //dnsserver give route to agent
    ReportStatusReqId    = 9; //agent report lb status to reporter
}

//represent a remote node
message HostAddr {
    required int32 ip  = 1;
    required int32 port = 2;
}

//api get a host from agent (UDP)
message GetHostReq {
    required uint32 seq   = 1;
    required int32 modid  = 2;
    required int32 cmdid  = 3;
}

//agent give a host to api (UDP)
message GetHostRsp {
    required uint32 seq    = 1;
    required int32 modid   = 2;
    required int32 cmdid   = 3;
    required int32 retcode = 4;
    optional HostAddr host = 5;
}

//api report call result to agent
message ReportReq {
    required int32 modid   = 1;
    required int32 cmdid   = 2;
    required HostAddr host = 3;
    required int32 retcode = 4;
}

//agent get route from dnsserver (TCP)
message GetRouteByAgentReq {
    required int32 modid = 1;
    required int32 cmdid = 2;
}

//dnsserver give route to agent
message GetRouteByAgentRsp {
    required int32 modid    = 1;
    required int32 cmdid    = 2;
    repeated HostAddr hosts = 3;
}

//host call result
message HostCallResult {
    required int32 ip    = 1;
    required int32 port  = 2;
    required uint32 succ = 3;
    required uint32 err  = 4;
}

//agent report lb status to reporter
message ReportStatusReq {
    required int32 modid            = 1;
    required int32 cmdid            = 2;
    required int32 caller           = 3;
    repeated HostCallResult results = 4;
    required uint32 ts              = 5;//sec
    required bool overload          = 6;
}
